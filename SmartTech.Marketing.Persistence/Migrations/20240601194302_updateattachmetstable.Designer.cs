// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartTech.Marketing.Persistence.Context;

#nullable disable

namespace SmartTech.Marketing.Persistence.Migrations
{
    [DbContext(typeof(DatabaseService))]
    [Migration("20240601194302_updateattachmetstable")]
    partial class updateattachmetstable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientType")
                        .HasColumnType("integer")
                        .HasColumnName("client_type");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ClientType");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("client");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("client_type");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("AttachmentId");

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("Tags");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_attachments");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractDueDates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_due_dates");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractImageModes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<double>("CreditFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_factor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_image_modes");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractImageResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<int>("ContractImageTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_image_type_id");

                    b.Property<double>("CreditFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_factor");

                    b.Property<double>("MinOrderAreaSize")
                        .HasColumnType("double precision")
                        .HasColumnName("min_order_area_size");

                    b.Property<int>("ResolutionInCm")
                        .HasColumnType("integer")
                        .HasColumnName("resolution_in_cm");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractImageTypeId");

                    b.ToTable("contract_image_resolution");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("contract_image_type");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractOrderPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<double>("CreditFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("credit_factor");

                    b.Property<int>("MaxAllowedDays")
                        .HasColumnType("integer")
                        .HasColumnName("max_allowed_days");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_order_priority");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractPaymentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAddress")
                        .HasColumnType("text")
                        .HasColumnName("bank_address");

                    b.Property<string>("BankBranch")
                        .HasColumnType("text")
                        .HasColumnName("bank_branch");

                    b.Property<string>("BankName")
                        .HasColumnType("text")
                        .HasColumnName("bank_name");

                    b.Property<string>("ClientNameInBank")
                        .HasColumnType("text")
                        .HasColumnName("client_name_in_bank");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<string>("Iban")
                        .HasColumnType("text")
                        .HasColumnName("IBAN");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_payment_information");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractPaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("contract_payment_type");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractPeriods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AvailableCredit")
                        .HasColumnType("double precision")
                        .HasColumnName("available _credit");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<double>("RemainingCredit")
                        .HasColumnType("double precision")
                        .HasColumnName("remaining_credit");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_periods");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<double>("ServiceCost")
                        .HasColumnType("double precision")
                        .HasColumnName("service_cost");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("contract_services");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_number");

                    b.Property<int>("ContractPaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_payment_type_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<double>("TotalContractCost")
                        .HasColumnType("double precision")
                        .HasColumnName("total_contract_cost");

                    b.Property<int>("TotalCredit")
                        .HasColumnType("integer")
                        .HasColumnName("total_credit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractPaymentTypeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Geometry>("CountryGeometry")
                        .HasColumnType("geometry")
                        .HasColumnName("country_geometry");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<string>("CountryPrefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_prefix");

                    b.Property<Point>("CountyGeometry")
                        .HasColumnType("geometry(Point,3857)")
                        .HasColumnName("county_geometry");

                    b.Property<Point>("Geom")
                        .HasColumnType("geometry(Point,3857)")
                        .HasColumnName("geom");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency_name");

                    b.HasKey("Id");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Satellite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("satellite");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ActualConsumedCredit")
                        .HasColumnType("double precision")
                        .HasColumnName("actual_consumed_credit");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<double>("CompeletedPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("compeleted_percentage");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<int>("ContractImageModeId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_image_mode_id");

                    b.Property<int>("ContractImageResolutionId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_image_resolution_id");

                    b.Property<int>("ContractOrderPirorityId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_order_pirority_id");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<Geometry>("OrderGeometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("order_geometry");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("order_status_id");

                    b.Property<double>("PredictedConsumedCredit")
                        .HasColumnType("double precision")
                        .HasColumnName("predicted_consumed_credit");

                    b.Property<double>("ShootingAngle")
                        .HasColumnType("double precision")
                        .HasColumnName("shooting_angle");

                    b.Property<double>("TotalOrderAreaInKm")
                        .HasColumnType("double precision")
                        .HasColumnName("total_order_area_in_KM");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("sms_order");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderOpportunities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Chosen")
                        .HasColumnType("boolean")
                        .HasColumnName("chosen");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("SatId")
                        .HasColumnType("integer")
                        .HasColumnName("sat_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SatId");

                    b.ToTable("sms_order_opportunities");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderRoutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalSystemIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_system_identifier");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("SatId")
                        .HasColumnType("integer")
                        .HasColumnName("sat_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SatId");

                    b.ToTable("sms_order_routes");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("sms_order_services");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sms_order_status");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsRouteScenes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Cloudness")
                        .HasColumnType("double precision")
                        .HasColumnName("cloudness");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<string>("QlPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ql_path");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<double>("ShootingAngle")
                        .HasColumnType("double precision")
                        .HasColumnName("shooting_angle");

                    b.Property<DateOnly>("ShootingDate")
                        .HasColumnType("date")
                        .HasColumnName("shooting_date");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("sms_route_scenes");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsSceneTargets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SceneId")
                        .HasColumnType("integer")
                        .HasColumnName("scene_id");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer")
                        .HasColumnName("target_id");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("TargetId");

                    b.ToTable("sms_scene_targets");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargetTypeMainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sms_target_type_main_category");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargetTypeSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SmsTargetTypeMainCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("sms_target_type_main_category_id");

                    b.HasKey("Id");

                    b.HasIndex("SmsTargetTypeMainCategoryId");

                    b.ToTable("sms_target_type_sub_category");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SmsTargetTypeSubCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("sms_target_type_sub_category_id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SmsTargetTypeSubCategoryId");

                    b.ToTable("sms_targets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Client", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.ClientType", "ClientTypeNavigation")
                        .WithMany("Client")
                        .HasForeignKey("ClientType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.Country", "Country")
                        .WithMany("Client")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Client")
                        .HasForeignKey("SmartTech.Marketing.Domain.Entities.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientTypeNavigation");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractAttachments", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractAttachments")
                        .HasForeignKey("ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractDueDates", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractDueDates")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractImageModes", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractImageModes")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractImageResolution", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractImageResolution")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.ContractImageType", "ContractImageType")
                        .WithMany("ContractImageResolution")
                        .HasForeignKey("ContractImageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ContractImageType");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractOrderPriority", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractOrderPriority")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractPaymentInformation", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractPaymentInformation")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractPeriods", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractPeriods")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractServices", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("ContractServices")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Contracts", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.ContractPaymentType", "ContractPaymentType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.Currency", "Currency")
                        .WithMany("Contracts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ContractPaymentType");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrder", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Client", "Client")
                        .WithMany("SmsOrder")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.Contracts", "Contract")
                        .WithMany("SmsOrder")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsOrderStatus", "OrderStatus")
                        .WithMany("SmsOrder")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Contract");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderOpportunities", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsOrder", "Order")
                        .WithMany("SmsOrderOpportunities")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.Satellite", "Sat")
                        .WithMany("SmsOrderOpportunities")
                        .HasForeignKey("SatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Sat");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderRoutes", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsOrder", "Order")
                        .WithMany("SmsOrderRoutes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.Satellite", "Sat")
                        .WithMany("SmsOrderRoutes")
                        .HasForeignKey("SatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Sat");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderServices", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsOrder", "Order")
                        .WithMany("SmsOrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.ContractServices", "Service")
                        .WithMany("SmsOrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsRouteScenes", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsOrderRoutes", "Route")
                        .WithMany("SmsRouteScenes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsSceneTargets", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsRouteScenes", "Scene")
                        .WithMany("SmsSceneTargets")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsTargets", "Target")
                        .WithMany("SmsSceneTargets")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargetTypeSubCategory", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsTargetTypeMainCategory", "SmsTargetTypeMainCategory")
                        .WithMany("SmsTargetTypeSubCategory")
                        .HasForeignKey("SmsTargetTypeMainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SmsTargetTypeMainCategory");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargets", b =>
                {
                    b.HasOne("SmartTech.Marketing.Domain.Entities.Country", "Country")
                        .WithMany("SmsTargets")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTech.Marketing.Domain.Entities.SmsTargetTypeSubCategory", "SmsTargetTypeSubCategory")
                        .WithMany("SmsTargets")
                        .HasForeignKey("SmsTargetTypeSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("SmsTargetTypeSubCategory");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Client", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("SmsOrder");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ClientType", b =>
                {
                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractImageType", b =>
                {
                    b.Navigation("ContractImageResolution");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractPaymentType", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.ContractServices", b =>
                {
                    b.Navigation("SmsOrderServices");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Contracts", b =>
                {
                    b.Navigation("ContractAttachments");

                    b.Navigation("ContractDueDates");

                    b.Navigation("ContractImageModes");

                    b.Navigation("ContractImageResolution");

                    b.Navigation("ContractOrderPriority");

                    b.Navigation("ContractPaymentInformation");

                    b.Navigation("ContractPeriods");

                    b.Navigation("ContractServices");

                    b.Navigation("SmsOrder");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Country", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("SmsTargets");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.Satellite", b =>
                {
                    b.Navigation("SmsOrderOpportunities");

                    b.Navigation("SmsOrderRoutes");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrder", b =>
                {
                    b.Navigation("SmsOrderOpportunities");

                    b.Navigation("SmsOrderRoutes");

                    b.Navigation("SmsOrderServices");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderRoutes", b =>
                {
                    b.Navigation("SmsRouteScenes");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsOrderStatus", b =>
                {
                    b.Navigation("SmsOrder");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsRouteScenes", b =>
                {
                    b.Navigation("SmsSceneTargets");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargetTypeMainCategory", b =>
                {
                    b.Navigation("SmsTargetTypeSubCategory");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargetTypeSubCategory", b =>
                {
                    b.Navigation("SmsTargets");
                });

            modelBuilder.Entity("SmartTech.Marketing.Domain.Entities.SmsTargets", b =>
                {
                    b.Navigation("SmsSceneTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
